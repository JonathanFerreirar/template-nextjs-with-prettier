{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "root": true,
  "extends": [
    "next",
    "eslint:recommended",
    "prettier",
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "plugin:react-hooks/recommended"
  ],
  "plugins": [
    "prefer-arrow",
    "prettier",
    "@typescript-eslint",
    "react",
    "react-hooks"
  ],
  "rules": {
    "prefer-const": "warn",
    "no-var": "warn",
    "no-unused-vars": "warn",
    "object-shorthand": "warn",
    "quote-props": [
      "warn",
      "as-needed"
    ],
    "@typescript-eslint/array-type": [
      "warn",
      {
        "default": "array"
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ImportDeclaration[source.value='react'] ImportSpecifier",
        "message": "Import React hooks as part of the default React import, INSTEADE `import React, { useState } from 'react' useState(); USE React.useState()`."
      }
    ],
    "@typescript-eslint/consistent-type-assertions": [
      "warn",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "never"
      }
    ],
    // React rules
    "react/jsx-fragments": [
      "warn",
      "syntax"
    ], // Shorthand syntax for React fragments
    "react/jsx-filename-extension": [
      "warn",
      {
        "extensions": [
          "ts",
          "tsx"
        ]
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "prettier/prettier": "warn"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "overrides": [
    {
      "files": [
        "*.tsx",
        "*.jsx"
      ],
      "rules": {
        "@typescript-eslint/consistent-type-definitions": [
          "error",
          "type"
        ]
      }
    },
    {
      "files": [
        "./src/components/**/*.tsx",
        "./src/components/**/*.jsx"
      ],
      "rules": {
        "prefer-arrow/prefer-arrow-functions": [
          "error",
          {
            "disallowPrototype": true,
            "singleReturnOnly": false,
            "classPropertiesAllowed": false
          }
        ]
      }
    }
  ]
}